1.Ans 
def twoSum(nums, target):
    # Create a dictionary to store the complement of each number and its index
    complement_dict = {}

    # Iterate through the array
    for i, num in enumerate(nums):
        # Check if the complement of the current number exists in the dictionary
        complement = target - num
        if complement in complement_dict:
            # Return the indices of the two numbers
            return [complement_dict[complement], i]
        
        # If the complement doesn't exist, add the current number and its index to the dictionary
        complement_dict[num] = i

    # If no solution is found, return an empty list or handle it according to your requirements
    return []

# Example usage
nums = [2, 7, 11, 15]
target = 9
result = twoSum(nums, target)
print(result)  # Output: [0, 1]

2. Ans.

def removeElement(nums, val):
    # Initialize two pointers: one for iterating through the array and one for keeping track of the next position to store a non-val element
    i = 0
    k = 0

    # Iterate through the array
    while i < len(nums):
        # If the current element is not equal to val, move it to the next available position and increment k
        if nums[i] != val:
            nums[k] = nums[i]
            k += 1
        i += 1

    # Return the number of elements that are not equal to val
    return k

# Example usage
nums = [3, 2, 2, 3]
val = 3
k = removeElement(nums, val)
print(k)  # Output: 2
print(nums[:k])  # Output: [2, 2]

3. Ans

def searchInsert(nums, target):
    left = 0
    right = len(nums) - 1

    while left <= right:
        mid = left + (right - left) // 2
        
        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    
    # If the target is not found, return the index where it would be inserted
    return left

# Example usage
nums = [1, 3, 5, 6]
target = 5
index = searchInsert(nums, target)
print(index)  # Output: 2

4. Ans

def plusOne(digits):
    carry = 1
    for i in range(len(digits) - 1, -1, -1):
        digits[i] += carry
        digits[i] %= 10
        carry = digits[i] // 10
        if carry == 0:
            break

    if carry == 1:
        digits.insert(0, 1)

    return digits

digits = [1, 2, 3]
result = plusOne(digits)
print(result)

[1, 2, 4]

5. Ans

def merge(nums1, m, nums2, n):
    p1 = m - 1  # Pointer for nums1
    p2 = n - 1  # Pointer for nums2
    p = m + n - 1  # Pointer for the merged array

    # Merge nums1 and nums2, starting from the end of each array
    while p1 >= 0 and p2 >= 0:
        if nums1[p1] > nums2[p2]:
            nums1[p] = nums1[p1]
            p1 -= 1
        else:
            nums1[p] = nums2[p2]
            p2 -= 1
        p -= 1

    # If there are remaining elements in nums2, copy them to nums1
    if p2 >= 0:
        nums1[:p2 + 1] = nums2[:p2 + 1]

nums1 = [1, 2, 3, 0, 0, 0]
m = 3
nums2 = [2, 5, 6]
n = 3

merge(nums1, m, nums2, n)

print(nums1)

[1, 2, 2, 3, 5, 6]

6. Ans

def containsDuplicate(nums):
    num_set = set()

    for num in nums:
        if num in num_set:
            return True
        num_set.add(num)

    return False

nums = [1, 2, 3, 1]

result = containsDuplicate(nums)

print(result)

True

7. Ans

def moveZeroes(nums):
    # Initialize a pointer to keep track of the position to place the next nonzero element
    next_nonzero = 0

    # Iterate through the array
    for i in range(len(nums)):
        # If the current element is nonzero, swap it with the next_nonzero position
        if nums[i] != 0:
            nums[next_nonzero], nums[i] = nums[i], nums[next_nonzero]
            next_nonzero += 1

    # Zeros are now moved to the end while maintaining the relative order of the nonzero elements
nums = [0, 1, 0, 3, 12]

moveZeroes(nums)

print(nums)

[1, 3, 12, 0, 0]

8. Ans

def findErrorNums(nums):
    n = len(nums)
    xor_result = 0
    xor_nums = 0

    # Calculate XOR of nums and XOR of 1 to n
    for i in range(n):
        xor_nums ^= nums[i]
        xor_result ^= (i + 1)

    # XOR of missing_num and duplicate_num
    xor_result ^= xor_nums

    # Find the rightmost bit set in the XOR result
    rightmost_bit = xor_result & (-xor_result)

    missing_num = 0
    duplicate_num = 0

    # Find the missing and duplicate numbers
    for num in nums:
        if num & rightmost_bit:
            duplicate_num ^= num
        else:
            missing_num ^= num

    for i in range(1, n + 1):
        if i & rightmost_bit:
            duplicate_num ^= i
        else:
            missing_num ^= i

    return [duplicate_num, missing_num]

nums = [1, 2, 2, 4]

result = findErrorNums(nums)

print(result)

[2, 3]


