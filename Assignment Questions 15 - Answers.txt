1. Ans

def next_greater_element(arr):
    if len(arr) == 0:
        return []

    stack = []
    result = [-1] * len(arr)

    for i in range(len(arr)):
        while stack and arr[i] > arr[stack[-1]]:
            result[stack.pop()] = arr[i]
        stack.append(i)

    return result

# Example: Find the next greater element for each element in the array [1, 3, 2, 4]
result = next_greater_element([1, 3, 2, 4])

# Print the result
print(result)
# Output: [3, -1, 4, -1]

2. Ans
def nearest_smaller_number_on_left(a):
    if len(a) == 0:
        return []

    stack = []
    result = [-1] * len(a)

    for i in range(len(a)):
        while stack and a[i] <= a[stack[-1]]:
            stack.pop()
        if stack:
            result[i] = a[stack[-1]]
        stack.append(i)

    return result

# Example: Find the nearest smaller number on the left side for each element in the array [1, 6, 2]
result = nearest_smaller_number_on_left([1, 6, 2])

# Print the result
print(result)
# Output: [-1, 1, 6]

3. Ans

class Stack:
    def __init__(self):
        self.q1 = []
        self.q2 = []

    def push(self, value):
        self.q1.append(value)

    def pop(self):
        if self.empty():
            return None

        while len(self.q1) > 1:
            self.q2.append(self.q1.pop(0))

        return self.q1.pop(0)

    def top(self):
        if self.empty():
            return None

        while len(self.q1) > 1:
            self.q2.append(self.q1.pop(0))

        top_element = self.q1.pop(0)
        self.q2.append(top_element)

        self.q1, self.q2 = self.q2, self.q1

        return top_element

    def empty(self):
        return len(self.q1) == 0 and len(self.q2) == 0

# Example usage:

stack = Stack()
stack.push(1)
stack.push(2)
stack.push(3)

print(stack.pop())  # Output: 3
print(stack.top())  # Output: 2
print(stack.empty())  # Output: False

stack.push(4)

print(stack.pop())  # Output: 4
print(stack.pop())  # Output: 2
print(stack.pop())  # Output: 1
print(stack.empty())  # Output: True


stack = Stack()
stack.push(2)
stack.push(3)
print(stack.pop())  # Output: 3
stack.push(4)
print(stack.pop())  # Output: 4

4. Ans

def reverse_stack(stack):
    if len(stack) <= 1:
        return stack

    top_element = stack.pop()
    reversed_stack = reverse_stack(stack)
    insert_at_bottom(reversed_stack, top_element)
    return reversed_stack

def insert_at_bottom(stack, value):
    if len(stack) == 0:
        stack.append(value)
    else:
        top_element = stack.pop()
        insert_at_bottom(stack, value)
        stack.append(top_element)

# Example 1: Reverse a stack
stack = [1, 2, 3, 4, 5]
reversed_stack = reverse_stack(stack)

# Print the reversed stack
print(reversed_stack)
# Output: [5, 4, 3, 2, 1]

5. Ans

def reverse_string(S):
    stack = []
    for char in S:
        stack.append(char)
    
    reversed_string = ""
    while stack:
        reversed_string += stack.pop()

    return reversed_string

# Example 1: Reverse a string
S = "Hello, World!"
reversed_str = reverse_string(S)

# Print the reversed string
print(reversed_str)
# Output: "!dlroW ,olleH"

6. Ans

def evaluate_postfix_expression(S):
    stack = []

    for char in S:
        if char.isdigit():
            stack.append(int(char))
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()

            if char == '+':
                result = operand1 + operand2
            elif char == '-':
                result = operand1 - operand2
            elif char == '*':
                result = operand1 * operand2
            elif char == '/':
                result = operand1 / operand2

            stack.append(result)

    return stack.pop()

# Example 1: Evaluate a postfix expression
S = "523*+"
result = evaluate_postfix_expression(S)

# Print the result
print(result)
# Output: 11

7. Ans

class MinStack:
    def __init__(self):
        self.data_stack = []
        self.min_stack = []

    def push(self, val):
        self.data_stack.append(val)
        if not self.min_stack or val <= self.min_stack[-1]:
            self.min_stack.append(val)

    def pop(self):
        if self.data_stack:
            popped = self.data_stack.pop()
            if popped == self.min_stack[-1]:
                self.min_stack.pop()

    def top(self):
        if self.data_stack:
            return self.data_stack[-1]
        return None

    def getMin(self):
        if self.min_stack:
            return self.min_stack[-1]
        return None

# Example usage:

stack = MinStack()
stack.push(4)
stack.push(5)
stack.push(2)
stack.push(1)

print(stack.top())  # Output: 1
print(stack.getMin())  # Output: 1

stack.pop()
print(stack.top())  # Output: 2
print(stack.getMin())  # Output: 2


8. Ans

def trap_water(height):
    n = len(height)
    left = 0
    right = n - 1
    left_max = 0
    right_max = 0
    water = 0

    while left <= right:
        if height[left] <= height[right]:
            if height[left] > left_max:
                left_max = height[left]
            else:
                water += left_max - height[left]
            left += 1
        else:
            if height[right] > right_max:
                right_max = height[right]
            else:
                water += right_max - height[right]
            right -= 1

    return water

# Example 1: Compute the amount of trapped water in the elevation map [0,1,0,2,1,0,1,3,2,1,2,1]
height = [0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1]
trapped_water = trap_water(height)

# Print the result
print(trapped_water)
# Output: 6
 





