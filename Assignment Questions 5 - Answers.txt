1. Ans

def convert_to_2d_array(original, m, n):
    if m * n != len(original):
        return []  # Return empty array if it's impossible
    
    result = []
    for i in range(m):
        row = original[i * n : (i + 1) * n]
        result.append(row)
    
    return result

original = [1, 2, 3, 4, ]
m = 2
n = 2

result = convert_to_2d_array(original, m, n)
print(result)

2. Ans

def num_complete_rows(n):
    k = 1
    while (k * (k + 1)) // 2 <= n:
        k += 1
    return k - 1
	
print(num_complete_rows(5))  

3. Ans

def sortedSquares(nums):
    n = len(nums)
    output = [0] * n
    left, right = 0, n - 1
    i = n - 1
    
    while left <= right:
        if abs(nums[left]) >= abs(nums[right]):
            output[i] = nums[left] ** 2
            left += 1
        else:
            output[i] = nums[right] ** 2
            right -= 1
        i -= 1
    
    return output
	
nums = [-4, -1, 0, 3, 10]
print(sortedSquares(nums))  

4. Ans

def findDisappearedNumbers(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    
    answer1 = [num for num in nums1 if num not in set2]
    answer2 = [num for num in nums2 if num not in set1]
    
    return [answer1, answer2]

nums1 = [1, 2, 3]
nums2 = [2, 4, 6]
print(findDisappearedNumbers(nums1, nums2))  

5. Ans

def findTheDistanceValue(arr1, arr2, d):
    distance = 0
    for num in arr1:
        found = False
        for num2 in arr2:
            if abs(num - num2) <= d:
                found = True
                break
        if not found:
            distance += 1
    return distance

arr1 = [4, 5, 8]
arr2 = [10, 9, 1, 8]
d = 2
print(findTheDistanceValue(arr1, arr2, d))  

6. Ans

def findDuplicates(nums):
    result = []
    for num in nums:
        index = abs(num) - 1
        if nums[index] < 0:
            result.append(abs(num))
        else:
            nums[index] *= -1
    return result
	
nums = [4, 3, 2, 7, 8, 2, 3, 1]
print(findDuplicates(nums)) 

7. Ans

def findMin(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = (left + right) // 2

        if nums[mid] < nums[left] and nums[mid] < nums[right]:
            right = mid
        elif nums[mid] > nums[left] and nums[mid] > nums[right]:
            left = mid + 1
        else:
            return nums[left]

    return nums[left]
nums = [3, 4, 5, 1, 2]
print(findMin(nums))  

8. Ans

def findOriginalArray(changed):
    changed.sort()
    original = []
    
    for num in changed:
        if num % 2 == 0:
            original.append(num // 2)
        else:
            return []
    
    return original
	
changed = [1, 3, 4, 2, 6, 8]
print(findOriginalArray(changed))  









