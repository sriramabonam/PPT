1.Ans

def arrayPairSum(nums):
    nums.sort()  # Sort the array in ascending order
    max_sum = 0

    for i in range(0, len(nums), 2):
        max_sum += min(nums[i], nums[i+1])

    return max_sum

nums = [1, 4, 3, 2]
max_sum = arrayPairSum(nums)
print(max_sum)

2.Ans

def maxCandies(candyType):
    uniqueCandies = set()

    for candy in candyType:
        uniqueCandies.add(candy)

    maxCandies = len(candyType) // 2

    return min(len(uniqueCandies), maxCandies)

candyType = [1, 1, 2, 2, 3, 3]
max_types = maxCandies(candyType)
print(max_types)

3.Ans

def findLHS(nums):
    count = {}
    
    for num in nums:
        count[num] = count.get(num, 0) + 1
    
    max_length = 0
    
    for num in count:
        if num + 1 in count:
            length = count[num] + count[num + 1]
            max_length = max(max_length, length)
    
    return max_length

nums = [1, 3, 2, 2, 5, 2, 3, 7]
longest_length = findLHS(nums)
print(longest_length)

4.Ans

def canPlaceFlowers(flowerbed, n):
    count = 0
    max_flowers = 0
    length = len(flowerbed)

    for i in range(length):
        if flowerbed[i] == 0:
            count += 1
        else:
            if count > 0:
                max_flowers += (count - 1) // 2 + 1
            count = 0

    if count > 0:
        max_flowers += count // 2

    return max_flowers >= n

flowerbed = [1, 0, 0, 0, 1]
n = 1
can_plant = canPlaceFlowers(flowerbed, n)
print(can_plant)

5.Ans

def maximumProduct(nums):
    nums.sort()
    n = len(nums)
    max_product = nums[n - 1] * nums[n - 2] * nums[n - 3]
    alternate_product = nums[0] * nums[1] * nums[n - 1]
    return max(max_product, alternate_product)

nums = [1, 2, 3]
max_product = maximumProduct(nums)
print(max_product)

6.Ans

def search(nums, target):
    left, right = 0, len(nums) - 1

    while left <= right:
        mid = (left + right) // 2

        if nums[mid] == target:
            return mid
        elif nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1

nums = [-1, 0, 3, 5, 9, 12]
target = 9
index = search(nums, target)
print(index)

7.Ans

def isMonotonic(nums):
    increasing = decreasing = True

    for i in range(1, len(nums)):
        if nums[i] < nums[i - 1]:
            increasing = False
        if nums[i] > nums[i - 1]:
            decreasing = False

    return increasing or decreasing

nums = [1, 2, 2, 3]
result = isMonotonic(nums)
print(result)

8.Ans

def minScore(nums, k):
    minimum = maximum = nums[0]

    for i in range(1, len(nums)):
        if nums[i] > maximum:
            maximum = nums[i]
        if nums[i] < minimum:
            minimum = nums[i]

    difference = maximum - minimum

    if difference > 2 * k:
        difference -= 2 * k
    else:
        difference -= k

    return difference

nums = [1]
k = 0
min_score = minScore(nums, k)
print(min_score)
