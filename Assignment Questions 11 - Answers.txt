1. Ans

def mySqrt(x):
    if x == 0:
        return 0

    left, right = 1, x
    while left <= right:
        mid = left + (right - left) // 2
        if mid * mid == x:
            return mid
        elif mid * mid < x:
            left = mid + 1
        else:
            right = mid - 1

    return right

2. 

def findPeakElement(nums):
    left, right = 0, len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        if nums[mid] < nums[mid + 1]:
            left = mid + 1
        else:
            right = mid

    return left

3. Ans

def missingNumber(nums):
    n = len(nums)
    total_sum = n * (n + 1) // 2
    array_sum = sum(nums)
    return total_sum - array_sum

nums = [3, 0, 1]
missing = missingNumber(nums)
print(missing)

2

4. Ans
def findDuplicate(nums):
    slow = nums[0]
    fast = nums[0]

    # Move slow pointer by one step and fast pointer by two steps
    # until they meet in the cycle
    while True:
        slow = nums[slow]
        fast = nums[nums[fast]]
        if slow == fast:
            break

    # Move slow pointer to the start and move both pointers
    # by one step until they meet at the entrance of the cycle
    slow = nums[0]
    while slow != fast:
        slow = nums[slow]
        fast = nums[fast]

    return slow
nums = [1, 3, 4, 2, 2]
repeated_number = findDuplicate(nums)
print(repeated_number)

2

5. Ans

def intersection(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)
    return list(set1.intersection(set2))
nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
result = intersection(nums1, nums2)
print(result)

2

6. Ans

def findMin(nums):
    left = 0
    right = len(nums) - 1

    while left < right:
        mid = left + (right - left) // 2

        # If the middle element is greater than the rightmost element,
        # the minimum element must be on the right side
        if nums[mid] > nums[right]:
            left = mid + 1
        # If the middle element is smaller than the rightmost element,
        # the minimum element must be on the left side
        else:
            right = mid

    return nums[left]

nums = [4, 5, 6, 7, 0, 1, 2]
minimum = findMin(nums)
print(minimum)
0
7. Ans

def searchRange(nums, target):
    def findStart(nums, target):
        start = -1
        left, right = 0, len(nums) - 1

        while left <= right:
            mid = left + (right - left) // 2

            if nums[mid] >= target:
                right = mid - 1
            else:
                left = mid + 1

            if nums[mid] == target:
                start = mid

        return start

    def findEnd(nums, target):
        end = -1
        left, right = 0, len(nums) - 1

        while left <= right:
            mid = left + (right - left) // 2

            if nums[mid] <= target:
                left = mid + 1
            else:
                right = mid - 1

            if nums[mid] == target:
                end = mid

        return end

    start = findStart(nums, target)
    end = findEnd(nums, target)

    return [start, end]
nums = [5, 7, 7, 8, 8, 10]
target = 8
result = searchRange(nums, target)
print(result)

[3, 4]

8. Ans

from collections import Counter

def intersect(nums1, nums2):
    counter = Counter(nums1)
    result = []

    for num in nums2:
        if num in counter and counter[num] > 0:
            result.append(num)
            counter[num] -= 1

    return result
	
nums1 = [1, 2, 2, 1]
nums2 = [2, 2]
result = intersect(nums1, nums2)
print(result)

[2, 2]


