1.Ans

def findPermutation(s):
    n = len(s)
    current = 0
    perm = []

    for c in s:
        if c == 'I':
            perm.append(current)
            current += 1
        elif c == 'D':
            perm.insert(0, current)
            current += 1

    perm.append(current)
    return perm

s = "IDID"
print(findPermutation(s))  

2. Ans

def searchMatrix(matrix, target):
    rows = len(matrix)
    cols = len(matrix[0])
    low = 0
    high = rows * cols - 1

    while low <= high:
        mid = (low + high) // 2
        row = mid // cols
        col = mid % cols
        value = matrix[row][col]

        if value == target:
            return True
        elif value < target:
            low = mid + 1
        else:
            high = mid - 1

    return False
	
matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]
target = 3
print(searchMatrix(matrix, target)) 

3. Ans

def validMountainArray(arr):
    n = len(arr)
    i = 0

    if n < 3:
        return False

    while i < n - 1 and arr[i] < arr[i + 1]:
        i += 1

    if i == 0 or i == n - 1:
        return False

    while i < n - 1 and arr[i] > arr[i + 1]:
        i += 1

    return i == n - 1

arr1 = [2, 1]
arr2 = [3, 5, 5]
arr3 = [0, 3, 2, 1]
arr4 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
arr5 = [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]

print(validMountainArray(arr1))  # Output: False
print(validMountainArray(arr2))  # Output: False
print(validMountainArray(arr3))  # Output: True
print(validMountainArray(arr4))  # Output: False
print(validMountainArray(arr5))  # Output: False

4.ans

def findMaxLength(nums):
    max_length = 0
    count = 0
    sum_indices = {0: -1}

    for i in range(len(nums)):
        if nums[i] == 0:
            count -= 1
        else:
            count += 1

        if count in sum_indices:
            max_length = max(max_length, i - sum_indices[count])
        else:
            sum_indices[count] = i

    return max_length

nums = [0, 1]
print(findMaxLength(nums)) 

5. Ans

def minProductSum(nums1, nums2):
    nums1.sort()
    nums2.sort(reverse=True)

    product_sum = 0
    for i in range(len(nums1)):
        product_sum += nums1[i] * nums2[i]

    return product_sum

nums1 = [5, 3, 4, 2]
nums2 = [4, 2, 2, 5]
print(minProductSum(nums1, nums2))  

6. Ans

def findOriginalArray(changed):
    freq = {}
    for num in changed:
        freq[num] = freq.get(num, 0) + 1

    original = []
    for num in changed:
        if freq.get(2 * num, 0) == 0:
            return []
        freq[2 * num] -= 1
        original.append(num)

    return original

changed = [1, 3, 4, 2, 6, 8]
print(findOriginalArray(changed))  

8. Ans

def multiply_sparse_matrices(mat1, mat2):
    m = len(mat1)
    k = len(mat1[0])
    n = len(mat2[0])
    
    result = [[0] * n for _ in range(m)]
    
    for i in range(m):
        for j in range(n):
            for l in range(k):
                if mat1[i][l] != 0:
                    result[i][j] += mat1[i][l] * mat2[l][j]
    
    return result


mat1 = [[1,0,0],[-1,0,3]]
mat2 = [[7,0,0],[0,0,0],[0,0,1]]

result = multiply_sparse_matrices(mat1, mat2)
print(result)






 