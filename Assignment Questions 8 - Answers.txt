1. Ans

def minimumDeleteSum(s1, s2):
    # Initialize the DP table with 0s
    dp = [[0] * (len(s2) + 1) for _ in range(len(s1) + 1)]

    # Fill in the DP table
    for i in range(1, len(s1) + 1):
        dp[i][0] = dp[i - 1][0] + ord(s1[i - 1])

    for j in range(1, len(s2) + 1):
        dp[0][j] = dp[0][j - 1] + ord(s2[j - 1])

    for i in range(1, len(s1) + 1):
        for j in range(1, len(s2) + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = min(dp[i - 1][j] + ord(s1[i - 1]), dp[i][j - 1] + ord(s2[j - 1]))

    return dp[-1][-1]

s1 = "sea"
s2 = "eat"
print(minimumDeleteSum(s1, s2))

2. Ans

def checkValidString(s):
    stack = []
    asterisks = []
    
    for i, char in enumerate(s):
        if char == '(':
            stack.append(i)
        elif char == '*':
            asterisks.append(i)
        elif char == ')':
            if stack:
                stack.pop()
            elif asterisks:
                asterisks.pop()
            else:
                return False
    
    while stack and asterisks:
        if stack[-1] > asterisks[-1]:
            return False
        stack.pop()
        asterisks.pop()
    
    return len(stack) == 0

s = "()"
print(checkValidString(s))

3. Ans

def minDistance(word1, word2):
    # Find the length of the LCS using dynamic programming
    dp = [[0] * (len(word2) + 1) for _ in range(len(word1) + 1)]

    for i in range(1, len(word1) + 1):
        for j in range(1, len(word2) + 1):
            if word1[i - 1] == word2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1] + 1
            else:
                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])

    # Calculate the minimum number of steps
    lcs_length = dp[-1][-1]
    steps = len(word1) + len(word2) - 2 * lcs_length

    return steps

word1 = "sea"
word2 = "eat"
print(minDistance(word1, word2))

4. Ans

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


def str2tree(s):
    if not s:
        return None
    
    # Find the index of the first '('
    index = s.find('(')
    
    if index == -1:
        # The entire string represents a single node
        return TreeNode(int(s))
    
    # Construct the current node
    root_val = int(s[:index])
    root = TreeNode(root_val)
    
    # Find the substring enclosed in parentheses for the left child
    start = index
    count = 0
    for i in range(start, len(s)):
        if s[i] == '(':
            count += 1
        elif s[i] == ')':
            count -= 1
        
        if count == 0:
            end = i
            break
    
    # Recursively construct the left child
    root.left = str2tree(s[start+1:end])
    
    # Check if there is a right child enclosed in parentheses
    if end + 1 < len(s) and s[end + 1] == '(':
        # Find the substring enclosed in parentheses for the right child
        start = end + 1
        count = 0
        for i in range(start, len(s)):
            if s[i] == '(':
                count += 1
            elif s[i] == ')':
                count -= 1
                
            if count == 0:
                end = i
                break
        
        # Recursively construct the right child
        root.right = str2tree(s[start+1:end])
    
    return root

s = "4(2(3)(1))(6(5))"
root = str2tree(s)


# Function to traverse the tree in inorder (for testing purposes)
def inorder_traversal(node):
    if node is None:
        return []
    return inorder_traversal(node.left) + [node.val] + inorder_traversal(node.right)


result = inorder_traversal(root)
print(result)

5. Ans

def compress(chars):
    # Initialize pointers and variables
    write_index = 0
    count = 1
    
    # Iterate through the characters starting from the second one
    for i in range(1, len(chars) + 1):
        if i < len(chars) and chars[i] == chars[i - 1]:
            # Current character is the same as the previous one
            count += 1
        else:
            # Current character is different from the previous one or end of a group
            chars[write_index] = chars[i - 1]
            write_index += 1
            
            if count > 1:
                # More than one occurrence of the previous character
                count_str = str(count)
                for digit in count_str:
                    chars[write_index] = digit
                    write_index += 1
            count = 1
    
    return write_index

chars = ["a", "a", "b", "b", "c", "c", "c"]
new_length = compress(chars)
print(new_length)
print(chars[:new_length])

6. Ans

from collections import Counter

def findAnagrams(s, p):
    result = []
    p_count = Counter(p)
    window_count = Counter(s[:len(p)])

    if p_count == window_count:
        result.append(0)

    for i in range(len(p), len(s)):
        # Decrease the count of the character at the left end of the window
        left_char = s[i - len(p)]
        window_count[left_char] -= 1
        if window_count[left_char] == 0:
            del window_count[left_char]

        # Increase the count of the character at the right end of the window
        right_char = s[i]
        window_count[right_char] += 1

        # Compare the counts of characters in the window and p
        if p_count == window_count:
            result.append(i - len(p) + 1)

    return result

s = "cbaebabacd"
p = "abc"
print(findAnagrams(s, p))

7. Ans

def decodeString(s):
    stack = []
    current_count = 0
    current_string = ''

    for char in s:
        if char.isdigit():
            current_count = current_count * 10 + int(char)
        elif char == '[':
            stack.append((current_count, current_string))
            current_count = 0
            current_string = ''
        elif char == ']':
            count, prev_string = stack.pop()
            current_string = prev_string + current_string * count
        else:
            current_string += char

    return current_string

s = "3[a]2[bc]"
print(decodeString(s))

8. Ans

def buddyStrings(s, goal):
    if len(s) != len(goal):
        return False

    if s == goal:
        # Check if there are at least two identical characters in s
        seen = set()
        for char in s:
            if char in seen:
                return True
            seen.add(char)
        return False

    mismatched_pairs = []
    for i in range(len(s)):
        if s[i] != goal[i]:
            mismatched_pairs.append((s[i], goal[i]))

    return len(mismatched_pairs) == 2 and mismatched_pairs[0] == mismatched_pairs[1][::-1]

s = "ab"
goal = "ba"
print(buddyStrings(s, goal))



