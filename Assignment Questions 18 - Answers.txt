1. Ans

def mergeIntervals(intervals):
    # Sort the intervals based on their start times
    intervals.sort(key=lambda x: x[0])
    
    merged = []
    for interval in intervals:
        # If the merged list is empty or the current interval does not overlap with the last merged interval
        if not merged or interval[0] > merged[-1][1]:
            merged.append(interval)
        else:
            # Merge the current interval with the last merged interval
            merged[-1][1] = max(merged[-1][1], interval[1])
    
    return merged

2. Ans

def sortColors(nums):
    left = 0  # pointer for 0's
    right = len(nums) - 1  # pointer for 2's
    curr = 0  # pointer for current element

    while curr <= right:
        if nums[curr] == 0:
            nums[curr], nums[left] = nums[left], nums[curr]
            left += 1
            curr += 1
        elif nums[curr] == 2:
            nums[curr], nums[right] = nums[right], nums[curr]
            right -= 1
        else:
            curr += 1


3. Ans

def firstBadVersion(n):
    left = 1
    right = n

    while left < right:
        mid = left + (right - left) // 2
        if isBadVersion(mid):
            right = mid
        else:
            left = mid + 1

    return left

4. Ans

def maximumGap(nums):
    if len(nums) < 2:
        return 0
    
    # Perform radix sort
    max_val = max(nums)
    exp = 1
    n = len(nums)
    
    while max_val // exp > 0:
        count = [0] * 10
        output = [0] * n
        
        for num in nums:
            digit = (num // exp) % 10
            count[digit] += 1
        
        for i in range(1, 10):
            count[i] += count[i-1]
        
        for i in range(n-1, -1, -1):
            digit = (nums[i] // exp) % 10
            output[count[digit] - 1] = nums[i]
            count[digit] -= 1
        
        nums = output
        exp *= 10
    
    # Find the maximum difference
    max_diff = 0
    for i in range(1, n):
        diff = nums[i] - nums[i-1]
        max_diff = max(max_diff, diff)
    
    return max_diff


5. Ans

def containsDuplicate(nums):
    num_set = set()
    for num in nums:
        if num in num_set:
            return True
        num_set.add(num)
    return False

6. Ans

def findMinArrowShots(points):
    if not points:
        return 0
    
    points.sort(key=lambda x: x[1])  # Sort balloons based on end coordinates
    arrows = 1  # At least one arrow needed
    end = points[0][1]  # Current arrow position
    
    for start, _end in points:
        if start > end:
            arrows += 1
            end = _end
    
    return arrows

7. Ans

def lengthOfLIS(nums):
    n = len(nums)
    if n == 0:
        return 0
    
    dp = [1] * n  # Initialize dp array with all elements set to 1
    
    for i in range(1, n):
        for j in range(i):
            if nums[i] > nums[j]:
                dp[i] = max(dp[i], dp[j] + 1)
    
    return max(dp)


8. Ans

def find132pattern(nums):
    n = len(nums)
    if n < 3:
        return False
    
    stack = []
    s3 = float('-inf')
    
    for i in range(n-1, -1, -1):
        if nums[i] < s3:
            return True
        else:
            while stack and nums[i] > stack[-1]:
                s3 = stack.pop()
            stack.append(nums[i])
    
    return False
