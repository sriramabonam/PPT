1.Ans

def commonElements(arr1, arr2, arr3):
    set1 = set(arr1)
    set2 = set(arr2)
    set3 = set(arr3)

    result = list(set1.intersection(set2, set3))
    result.sort()

    return result
	
arr1 = [1, 2, 3, 4, 5]
arr2 = [1, 2, 5, 7, 9]
arr3 = [1, 3, 4, 5, 8]

print(commonElements(arr1, arr2, arr3))

2.Ans

def findDisjoint(nums1, nums2):
    set1 = set(nums1)
    set2 = set(nums2)

    distinct_nums1 = list(set1 - set2)
    distinct_nums2 = list(set2 - set1)

    return [distinct_nums1, distinct_nums2]

nums1 = [1, 2, 3]
nums2 = [2, 4, 6]

print(findDisjoint(nums1, nums2))

3. Ans	

def transpose(matrix):
    rows = len(matrix)
    cols = len(matrix[0])

    # Create an empty matrix with switched dimensions
    transposed_matrix = [[0] * rows for _ in range(cols)]

    # Switch rows and columns
    for i in range(rows):
        for j in range(cols):
            transposed_matrix[j][i] = matrix[i][j]

    return transposed_matrix

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(transpose(matrix))

4. Ans

def arrayPairSum(nums):
    nums.sort()  # Sort the array in ascending order
    total_sum = 0

    for i in range(0, len(nums), 2):
        total_sum += nums[i]

    return total_sum
	
nums = [1, 4, 3, 2]
print(arrayPairSum(nums))

5. Ans

import math

def arrangeCoins(n):
    complete_rows = math.floor((-1 + math.sqrt(1 + 8 * n)) / 2)
    return complete_rows
n = 5
print(arrangeCoins(n))

6. Ans

def sortedSquares(nums):
    squared_nums = [num ** 2 for num in nums]
    squared_nums.sort()
    return squared_nums
	
nums = [-4, -1, 0, 3, 10]
print(sortedSquares(nums))

7. Ans

def maxCount(m, n, ops):
    if not ops:
        return m * n

    min_ai = min(op[0] for op in ops)
    min_bi = min(op[1] for op in ops)

    return min_ai * min_bi
m = 3
n = 3
ops = [[2, 2], [3, 3]]
print(maxCount(m, n, ops))

8. Ans

def shuffle(nums, n):
    result = []

    for i in range(n):
        result.append(nums[i])
        result.append(nums[i + n])

    return result
	
nums = [2, 5, 1, 3, 4, 7]
n = 3
print(shuffle(nums, n))


