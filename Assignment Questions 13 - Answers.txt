1. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def create_new_linked_list(first_head, second_head):
    if first_head is None:
        return second_head

    if second_head is None:
        return first_head

    first = first_head
    second = second_head
    new_head = None
    new_tail = None

    while first and second:
        if first.data >= second.data:
            new_node = Node(first.data)
            first = first.next
        else:
            new_node = Node(second.data)
            second = second.next

        if new_head is None:
            new_head = new_node
            new_tail = new_node
        else:
            new_tail.next = new_node
            new_tail = new_node

    if first:
        new_tail.next = first

    if second:
        new_tail.next = second

    return new_head


# Linked list 1: 5 -> 7 -> 9 -> 11
# Linked list 2: 3 -> 4 -> 6 -> 8

# Create the nodes for linked list 1
node1 = Node(5)
node2 = Node(7)
node3 = Node(9)
node4 = Node(11)

# Connect the nodes for linked list 1
node1.next = node2
node2.next = node3
node3.next = node4

# Create the nodes for linked list 2
node5 = Node(3)
node6 = Node(4)
node7 = Node(6)
node8 = Node(8)

# Connect the nodes for linked list 2
node5.next = node6
node6.next = node7
node7.next = node8

# Create a new linked list using the greater nodes
new_head = create_new_linked_list(node1, node5)

# Print the new linked list
current = new_head
while current:
    print(current.data, end=" ")
    current = current.next

# Output: 5 7 9 11

2. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def remove_duplicates(head):
    current = head

    while current and current.next:
        if current.data == current.next.data:
            current.next = current.next.next
        else:
            current = current.next

    return head

# Example 1: Remove duplicates from the sorted linked list
# Linked list: 11 -> 11 -> 11 -> 21 -> 43 -> 43 -> 60

# Create the nodes
node1 = Node(11)
node2 = Node(11)
node3 = Node(11)
node4 = Node(21)
node5 = Node(43)
node6 = Node(43)
node7 = Node(60)

# Connect the nodes
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5
node5.next = node6
node6.next = node7

# Remove duplicates from the linked list
new_head = remove_duplicates(node1)

# Print the modified linked list
current = new_head
while current:
    print(current.data, end=" ")
    current = current.next

# Output: 11 21 43 60

3. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def reverse_k_nodes(head, k):
    current = head
    next_node = None
    previous = None
    count = 0

    # Reverse the first k nodes
    while current and count < k:
        next_node = current.next
        current.next = previous
        previous = current
        current = next_node
        count += 1

    # Recursively reverse the remaining nodes
    if next_node is not None:
        head.next = reverse_k_nodes(next_node, k)

    return previous

def print_list(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next

    print()

# Example 1: Reverse every k nodes in the linked list
# Linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10
# k = 3

# Create the nodes
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)
node6 = Node(6)
node7 = Node(7)
node8 = Node(8)
node9 = Node(9)
node10 = Node(10)

# Connect the nodes
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5
node5.next = node6
node6.next = node7
node7.next = node8
node8.next = node9
node9.next = node10

# Reverse every k nodes in the linked list
k = 3
new_head = reverse_k_nodes(node1, k)

# Print the modified linked list
print_list(new_head)
# Output: 3 2 1 6 5 4 9 8 7 10

# Example 2: Reverse every k nodes in the linked list (left-out nodes at the end)
# Linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9
# k = 4

# Create the nodes
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)
node6 = Node(6)
node7 = Node(7)
node8 = Node(8)
node9 = Node(9)

# Connect the nodes
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5
node5.next = node6
node6.next = node7
node7.next = node8
node8.next = node9

# Reverse every k nodes in the linked list
k = 4
new_head = reverse_k_nodes(node1, k)

# Print the modified linked list
print_list(new_head)
# Output: 4 3 2 1 8 7 6 5 9

4. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def reverse_alternate_k_nodes(head, k):
    current = head
    next_node = None
    previous = None
    count = 0

    # Reverse every alternate k nodes
    while current and count < k:
        next_node = current.next
        current.next = previous
        previous = current
        current = next_node
        count += 1

    # Connect the head of the reversed group to the head of the next group
    if head:
        head.next = current

    # Skip the next k nodes
    count = 0
    while current and count < k - 1:
        current = current.next
        count += 1

    # Recursively reverse the next group of k nodes
    if current:
        current.next = reverse_alternate_k_nodes(current.next, k)

    return previous

def print_list(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next

    print()

# Example: Reverse every alternate k nodes in the linked list
# Linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8 -> 9 -> 10
# k = 3

# Create the nodes
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)
node6 = Node(6)
node7 = Node(7)
node8 = Node(8)
node9 = Node(9)
node10 = Node(10)

# Connect the nodes
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5
node5.next = node6
node6.next = node7
node7.next = node8
node8.next = node9
node9.next = node10

# Reverse every alternate k nodes in the linked list
k = 3
new_head = reverse_alternate_k_nodes(node1, k)

# Print the modified linked list
print_list(new_head)
# Output: 3 2 1 4 5 6 9 8 7 10


5. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def merge_sorted_lists(a, b):
    dummy = Node(0)
    result = dummy

    while a and b:
        if a.data <= b.data:
            result.next = a
            a = a.next
        else:
            result.next = b
            b = b.next

        result = result.next

    if a:
        result.next = a
    else:
        result.next = b

    return dummy.next

def print_list(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next

    print()

# Example 1: Merge two sorted linked lists
# Linked list a: 5 -> 10 -> 15
# Linked list b: 2 -> 3 -> 20

# Create the nodes for linked list a
node1 = Node(5)
node2 = Node(10)
node3 = Node(15)

# Connect the nodes for linked list a
node1.next = node2
node2.next = node3

# Create the nodes for linked list b
node4 = Node(2)
node5 = Node(3)
node6 = Node(20)

# Connect the nodes for linked list b
node4.next = node5
node5.next = node6

# Merge the two sorted linked lists
merged_head = merge_sorted_lists(node1, node4)

# Print the merged linked list
print_list(merged_head)
# Output: 2 3 5 10 15 20

# Example 2: Merge two sorted linked lists
# Linked list a: 1 -> 1
# Linked list b: 2 -> 4

# Create the nodes for linked list a
node1 = Node(1)
node2 = Node(1)

# Connect the nodes for linked list a
node1.next = node2

# Create the nodes for linked list b
node3 = Node(2)
node4 = Node(4)

# Connect the nodes for linked list b
node3.next = node4

# Merge the two sorted linked lists
merged_head = merge_sorted_lists(node1, node3)

# Print the merged linked list
print_list(merged_head)
# Output: 1 1 2 4


6. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def merge_sorted_lists(a, b):
    dummy = Node(0)
    result = dummy

    while a and b:
        if a.data <= b.data:
            result.next = a
            a = a.next
        else:
            result.next = b
            b = b.next

        result = result.next

    if a:
        result.next = a
    else:
        result.next = b

    return dummy.next

def print_list(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next

    print()

# Example 1: Merge two sorted linked lists
# Linked list a: 5 -> 10 -> 15
# Linked list b: 2 -> 3 -> 20

# Create the nodes for linked list a
node1 = Node(5)
node2 = Node(10)
node3 = Node(15)

# Connect the nodes for linked list a
node1.next = node2
node2.next = node3

# Create the nodes for linked list b
node4 = Node(2)
node5 = Node(3)
node6 = Node(20)

# Connect the nodes for linked list b
node4.next = node5
node5.next = node6

# Merge the two sorted linked lists
merged_head = merge_sorted_lists(node1, node4)

# Print the merged linked list
print_list(merged_head)
# Output: 2 3 5 10 15 20

# Example 2: Merge two sorted linked lists
# Linked list a: 1 -> 1
# Linked list b: 2 -> 4

# Create the nodes for linked list a
node1 = Node(1)
node2 = Node(1)

# Connect the nodes for linked list a
node1.next = node2

# Create the nodes for linked list b
node3 = Node(2)
node4 = Node(4)

# Connect the nodes for linked list b

7. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

def reverse_doubly_linked_list(head):
    current = head
    temp = None

    while current:
        temp = current.next
        current.next = current.prev
        current.prev = temp
        head = current
        current = temp

    return head

def print_list(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next

    print()

# Example: Reverse a doubly linked list
# Doubly linked list: 1 <-> 2 <-> 3 <-> 4 <-> 5

# Create the nodes
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)

# Connect the nodes
node1.next = node2
node2.prev = node1
node2.next = node3
node3.prev = node2
node3.next = node4
node4.prev = node3
node4.next = node5
node5.prev = node4

# Reverse the doubly linked list
reversed_head = reverse_doubly_linked_list(node1)

# Print the reversed doubly linked list
print_list(reversed_head)
# Output: 5 4 3 2 1

8. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

def delete_node_at_position(head, position):
    if head is None:
        return None

    if position == 1:
        new_head = head.next
        if new_head:
            new_head.prev = None
        return new_head

    current = head
    count = 1

    while current and count < position:
        current = current.next
        count += 1

    if current is None:
        return head

    current.prev.next = current.next

    if current.next:
        current.next.prev = current.prev

    return head

def print_list(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next

    print()

# Example 1: Delete a node from a doubly linked list at a given position
# Doubly linked list: 1 <-> 2 <-> 3 <-> 4 <-> 5
# Position to delete: 3

# Create the nodes
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)

# Connect the nodes
node1.next = node2
node2.prev = node1
node2.next = node3
node3.prev = node2
node3.next = node4
node4.prev = node3
node4.next = node5
node5.prev = node4

# Delete the node at position 3
new_head = delete_node_at_position(node1, 3)

# Print the modified doubly linked list
print_list(new_head)
# Output: 1 2 4 5
