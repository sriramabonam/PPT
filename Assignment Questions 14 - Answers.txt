1. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def detect_and_remove_loop(head):
    slow = head
    fast = head

    # Find the meeting point of slow and fast pointers
    while fast and fast.next:
        slow = slow.next
        fast = fast.next.next

        if slow == fast:
            break

    # If no loop is found
    if fast is None or fast.next is None:
        return head

    # Reset slow pointer to the head and move both pointers one step at a time
    slow = head
    while slow.next != fast.next:
        slow = slow.next
        fast = fast.next

    # Remove the loop by setting the next pointer of the node where fast is pointing to None
    fast.next = None

    return head

def print_list(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next

    print()

# Example 1: Remove the loop from the linked list
# Linked list: 1 -> 2 -> 3 -> 4 -> 5 -> 3 (loop)

# Create the nodes
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)

# Connect the nodes
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5
node5.next = node3  # Create a loop

# Remove the loop from the linked list
new_head = detect_and_remove_loop(node1)

# Print the modified linked list
print_list(new_head)
# Output: 1 2 3 4 5


2. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def add_one_to_linked_list(head):
    carry = 1
    current = head
    prev = None

    # Traverse the linked list from right to left
    while current:
        # Add the value of the current node with the carry
        current.data += carry

        # Update the carry and current node value
        carry = current.data // 10
        current.data %= 10

        # Move to the next node
        prev = current
        current = current.next

    # If the carry is non-zero, add a new node at the beginning of the list
    if carry:
        new_node = Node(carry)
        new_node.next = head
        head = new_node

    return head

def print_list(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.next

    print()

# Example 1: Add 1 to the number represented as a linked list
# Linked list: 9 -> 9 -> 9

# Create the nodes
node1 = Node(9)
node2 = Node(9)
node3 = Node(9)

# Connect the nodes
node1.next = node2
node2.next = node3

# Add 1 to the linked list
new_head = add_one_to_linked_list(node1)

# Print the modified linked list
print_list(new_head)
# Output: 1 0 0 0


3. Ans
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.bottom = None

def merge_sorted_lists(a, b):
    dummy = Node(0)
    result = dummy

    while a and b:
        if a.data <= b.data:
            result.bottom = a
            a = a.bottom
        else:
            result.bottom = b
            b = b.bottom

        result = result.bottom

    if a:
        result.bottom = a
    else:
        result.bottom = b

    return dummy.bottom

def flatten_linked_list(head):
    if head is None or head.next is None:
        return head

    head.next = flatten_linked_list(head.next)

    head = merge_sorted_lists(head, head.next)

    return head

def print_list(head):
    current = head
    while current:
        print(current.data, end=" ")
        current = current.bottom

    print()

# Example 1: Flatten a linked list of sub-linked lists
# Linked list: 5 -> 10 -> 19 -> 28
#               |    |     |     |
#               V    V     V     V
#               7    20    22    35
#               |          |     |
#               V          V     V
#               8          50    40
#               |                |
#               V                V
#               30               45

# Create the nodes for the sub-linked lists
node1 = Node(5)
node2 = Node(7)
node3 = Node(8)
node4 = Node(30)
node5 = Node(10)
node6 = Node(20)
node7 = Node(50)
node8 = Node(19)
node9 = Node(22)
node10 = Node(40)
node11 = Node(28)
node12 = Node(35)
node13 = Node(45)

# Connect the sub-linked lists
node1.bottom = node2
node2.bottom = node3
node3.bottom = node4
node5.bottom = node6
node6.bottom = node7
node8.bottom = node9
node9.bottom = node10
node11.bottom = node12
node12.bottom = node13

# Connect the main linked list
node1.next = node5
node5.next = node8
node8.next = node11

# Flatten the linked list
flattened_head = flatten_linked_list(node1)

# Print the flattened linked list
print_list(flattened_head)
# Output: 5 7 8 10 19 20 22 28 30 35 40 45 50

4. Ans

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.random = None

def copy_special_linked_list(head):
    if head is None:
        return None

    # Step 1: Create a copy of each node and connect the next pointers of the copied nodes
    current = head
    while current:
        new_node = Node(current.data)
        new_node.next = current.next
        current.next = new_node
        current = new_node.next

    # Step 2: Update the random pointers of the copied nodes
    current = head
    while current:
        if current.random:
            current.next.random = current.random.next
        current = current.next.next

    # Step 3: Separate the original and copied linked lists
    current = head
    copied_head = head.next
    copied_current = copied_head
    while copied_current.next:
        current.next = current.next.next
        copied_current.next = copied_current.next.next
        current = current.next
        copied_current = copied_current.next

    current.next = None

    # Step 4: Return the head of the copied linked list
    return copied_head

def print_special_linked_list(head):
    current = head
    while current:
        random_data = current.random.data if current.random else "None"
        print("Data:", current.data, "Random:", random_data)
        current = current.next

# Example 1: Copy a special linked list
# Linked list: 1 -> 2 -> 3 -> 4 -> 5
# Random pointers: 1 -> 3, 2 -> 1, 3 -> 5, 4 -> 2, 5 -> 4

# Create the nodes
node1 = Node(1)
node2 = Node(2)
node3 = Node(3)
node4 = Node(4)
node5 = Node(5)

# Connect the nodes
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

# Set the random pointers
node1.random = node3
node2.random = node1
node3.random = node5
node4.random = node2
node5.random = node4

# Copy the special linked list
copied_head = copy_special_linked_list(node1)

# Print the copied special linked list
print_special_linked_list(copied_head)
# Output:
# Data: 1 Random: 3
# Data: 2 Random: 1
# Data: 3 Random: 5
# Data: 4 Random: 2
# Data: 5 Random: 4

5. Ans

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def odd_even_linked_list(head):
    if head is None or head.next is None:
        return head

    oddHead = head
    evenHead = head.next
    odd = oddHead
    even = evenHead

    while even and even.next:
        odd.next = even.next
        odd = odd.next
        even.next = odd.next
        even = even.next

    odd.next = evenHead

    return oddHead

def print_linked_list(head):
    current = head
    while current:
        print(current.val, end=" ")
        current = current.next

    print()

# Example 1: Reorder a singly linked list with odd and even indices
# Linked list: 1 -> 2 -> 3 -> 4 -> 5

# Create the nodes
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

# Connect the nodes
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

# Reorder the linked list
reordered_head = odd_even_linked_list(node1)

# Print the reordered linked list
print_linked_list(reordered_head)
# Output: 1 3 5 2 4

6. Ans

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def left_shift_linked_list(head, k):
    if head is None or k == 0:
        return head

    # Find the kth node from the beginning of the list
    length = 0
    current = head
    while current:
        length += 1
        current = current.next

    k %= length

    kth = head
    for _ in range(k):
        kth = kth.next

    # If kth node is None, return the head of the list
    if kth is None:
        return head

    # Shift the list
    new_head = kth.next
    kth.next = None

    current = new_head
    while current.next:
        current = current.next
    current.next = head

    return new_head

def print_linked_list(head):
    current = head
    while current:
        print(current.val, end=" ")
        current = current.next

    print()

# Example 1: Left-shift a linked list by k nodes
# Linked list: 1 -> 2 -> 3 -> 4 -> 5
# k = 2

# Create the nodes
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(3)
node4 = ListNode(4)
node5 = ListNode(5)

# Connect the nodes
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

# Left-shift the linked list by 2 nodes
shifted_head = left_shift_linked_list(node1, 2)

# Print the shifted linked list
print_linked_list(shifted_head)
# Output: 3 4 5 1 2


7. Ans

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def next_greater_node(head):
    if head is None:
        return []

    # Traverse the linked list in reverse order and maintain a stack
    stack = []
    current = head
    while current:
        while stack and stack[-1].val < current.val:
            stack[-1].val = current.val
            stack.pop()
        stack.append(current)
        current = current.next

    # Set the remaining elements in the answer array as 0
    for node in stack:
        node.val = 0

    # Convert the linked list values to an array
    answer = []
    current = head
    while current:
        answer.append(current.val)
        current = current.next

    return answer

# Example 1: Find the next greater node for each node in a linked list
# Linked list: 2 -> 1 -> 5

# Create the nodes
node1 = ListNode(2)
node2 = ListNode(1)
node3 = ListNode(5)

# Connect the nodes
node1.next = node2
node2.next = node3

# Find the next greater nodes
answer = next_greater_node(node1)

# Print the answer
print(answer)
# Output: [5, 5, 0]

8. Ans

class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def remove_zero_sum_sublists(head):
    if head is None:
        return None

    # Initialize a dummy node and a prefix sum dictionary
    dummy = ListNode(0)
    dummy.next = head
    prefix_sum = {0: dummy}

    # Initialize a running sum variable
    running_sum = 0

    # Traverse the linked list
    current = head
    while current:
        running_sum += current.val

        if running_sum in prefix_sum:
            # Remove the nodes between the current node and the node with the same running sum
            prev = prefix_sum[running_sum]
            prev.next = current.next

            # Update the prefix sum dictionary
            node = prev.next
            while node != current:
                running_sum += node.val
                del prefix_sum[running_sum]
                node = node.next

            # Reset the current node to the previous node
            current = prev
        else:
            prefix_sum[running_sum] = current

        current = current.next

    return dummy.next

def print_linked_list(head):
    current = head
    while current:
        print(current.val, end=" ")
        current = current.next

    print()

# Example 1: Remove consecutive sequences of nodes with sum 0
# Linked list: 1 -> 2 -> -3 -> 3 -> 1

# Create the nodes
node1 = ListNode(1)
node2 = ListNode(2)
node3 = ListNode(-3)
node4 = ListNode(3)
node5 = ListNode(1)

# Connect the nodes
node1.next = node2
node2.next = node3
node3.next = node4
node4.next = node5

# Remove consecutive sequences of nodes with sum 0
final_head = remove_zero_sum_sublists(node1)

# Print the final linked list
print_linked_list(final_head)
# Output: 3 1


