1. Ans

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def findMaxSubtreeSum(root):
    def dfs(node):
        nonlocal max_sum
        
        if not node:
            return 0
        
        left_sum = dfs(node.left)
        right_sum = dfs(node.right)
        subtree_sum = left_sum + right_sum + node.val
        
        max_sum = max(max_sum, subtree_sum)
        
        return subtree_sum
    
    max_sum = float('-inf')
    dfs(root)
    return max_sum

2. Ans

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
        
def constructBST(level_order):
    if not level_order:
        return None
    
    root = TreeNode(level_order[0])
    queue = [root]
    i = 1
    
    while i < len(level_order):
        node = queue.pop(0)
        
        left_val = level_order[i]
        if left_val != -1:
            left_child = TreeNode(left_val)
            node.left = left_child
            queue.append(left_child)
        
        i += 1
        
        if i < len(level_order):
            right_val = level_order[i]
            if right_val != -1:
                right_child = TreeNode(right_val)
                node.right = right_child
                queue.append(right_child)
        
        i += 1
    
    return root

3. Ans

def isLevelOrderBST(arr):
    if not arr:
        return True
    
    n = len(arr)
    low = float('-inf')
    high = float('inf')
    
    for i in range(n):
        if arr[i] < low or arr[i] > high:
            return False
        
        if i + 1 < n and arr[i + 1] < arr[i]:
            high = arr[i]
        else:
            low = arr[i]
    
    return True

